name: üîÑ Atualizar Eventos Sympla

on:
  # Executa manualmente
  workflow_dispatch:
    inputs:
      force_update:
        description: 'For√ßar atualiza√ß√£o mesmo sem mudan√ßas'
        required: false
        default: 'false'

  # Executa automaticamente a cada 6 horas
  schedule:
    - cron: '0 */6 * * *'  # 00:00, 06:00, 12:00, 18:00 UTC

  # Executa quando h√° push na branch main (opcional)
  push:
    branches: [ main ]
    paths:
      - 'sympla_processor.py'
      - '.github/workflows/update-events.yml'

permissions:
  contents: write

jobs:
  update-events:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 0

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: üîë Verify Sympla API Key
      env:
        SYMPLA_API_KEY: ${{ secrets.SYMPLA_API_KEY }}
      run: |
        if [ -z "$SYMPLA_API_KEY" ]; then
          echo "‚ùå SYMPLA_API_KEY n√£o configurada!"
          echo "üëâ V√° em Settings > Secrets > Actions"
          echo "üëâ Adicione SYMPLA_API_KEY com sua chave da API Sympla"
          exit 1
        fi
        echo "‚úÖ SYMPLA_API_KEY encontrada"

    - name: üì° Fetch events from Sympla API
      env:
        SYMPLA_API_KEY: ${{ secrets.SYMPLA_API_KEY }}
      run: |
        echo "üöÄ Iniciando busca de eventos..."
        python sympla_processor.py

        # Verifica se o arquivo foi gerado
        if [ ! -f events-data.json ]; then
          echo "‚ùå Falha ao gerar events-data.json"
          exit 1
        fi

        echo "‚úÖ Eventos processados com sucesso"

        # Mostra estat√≠sticas
        echo "üìä Estat√≠sticas dos eventos:"
        python - << 'PY'
import json
with open('events-data.json','r',encoding='utf-8') as f:
    data = json.load(f)
print(f'‚Ä¢ Total: {data.get("total_events")} eventos')
print(f'‚Ä¢ Igreja da Penha: {data.get("penha_events_count")} eventos')
print(f'‚Ä¢ Outras Igrejas: {data.get("outras_events_count")} eventos')
print(f'‚Ä¢ √öltima atualiza√ß√£o: {data.get("generated_at")}')
PY

    - name: üìÑ Generate HTML files
      run: |
        echo "üìù Gerando arquivos HTML..."
        python - << 'PY'
import json

with open('events-data.json','r',encoding='utf-8') as f:
    data = json.load(f)

# HTML principal com layout tipo "hub"
index_html = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Hub de Eventos - Igreja da Penha</title>
<meta name="description" content="Agenda do Curso Online de Pais e Padrinhos - Igreja da Penha e outras igrejas">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700;900&display=swap" rel="stylesheet">
<style>
  :root {{
    --bg: #f7fafc;
    --card: #ffffff;
    --ink: #0f172a;
    --muted: #64748b;
    --brand: #003448;
    --accent: #a2d2ff;
    --accent2: #7cc7ff;
    --ring: rgba(0,0,0,0.06);
  }}
  * {{ box-sizing: border-box; }}
  body {{
    margin: 0; padding: 0; background: transparent;
    font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    color: var(--ink);
  }}
  .wrap {{ max-width: 1100px; margin: 0 auto; padding: 24px; }}
  .hero {{
    background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 20px; padding: 24px;
    box-shadow: 0 6px 18px var(--ring);
    border: 1px solid #e2e8f0;
  }}
  .hero h1 {{
    margin: 0 0 6px; font-weight: 900; color: var(--brand); letter-spacing: .4px;
    font-size: 26px; text-transform: uppercase;
  }}
  .hero p {{ margin: 0; color: var(--muted); font-size: 14px; }}
  .stats {{ display: flex; gap: 12px; margin-top: 16px; flex-wrap: wrap; }}
  .badge {{
    background: #fff; border: 1px solid #e2e8f0; border-radius: 999px;
    padding: 8px 14px; font-weight: 700; box-shadow: 0 3px 10px var(--ring);
    font-size: 13px; color: var(--brand);
  }}
  .tabs {{
    margin-top: 18px; display: flex; gap: 8px; flex-wrap: wrap;
  }}
  .tab-btn {{
    appearance: none; border: 0; cursor: pointer;
    background: linear-gradient(145deg, #ffffff, #f8f9fa);
    color: var(--brand); font-weight: 800; letter-spacing: .3px;
    padding: 10px 16px; border-radius: 14px;
    box-shadow: 0 5px 12px var(--ring);
    transition: transform .18s ease, box-shadow .18s ease, background .18s ease;
  }}
  .tab-btn.active, .tab-btn:hover {{
    background: linear-gradient(145deg, var(--accent), var(--accent2));
    transform: translateY(-1px);
  }}
  .panel {{ display: none; margin-top: 18px; }}
  .panel.active {{ display: block; }}
  /* Fragments */
  .month {{ margin: 14px 0 22px; }}
  .month h3 {{ font-size: 14px; font-weight: 900; color: var(--brand); margin: 0 0 8px; letter-spacing: .4px; }}
  .event-btn {{
    display: inline-block; text-decoration: none; margin: 6px 8px 6px 0; line-height: 1.2;
    padding: 10px 16px; border-radius: 22px; font-weight: 700;
    background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%); color: var(--ink);
    border: 1px solid #e2e8f0; box-shadow: 0 4px 10px var(--ring);
    transition: transform .15s ease, background .15s ease;
  }}
  .event-btn:hover {{ transform: translateY(-1px); background: linear-gradient(145deg, var(--accent), var(--accent2)); color: #003448; }}
  .empty {{ color: var(--muted); text-align: center; padding: 24px 8px; }}
  .foot {{
    margin-top: 18px; font-size: 12px; color: var(--muted); text-align: center;
    background: rgba(248,249,250,.8); border: 1px solid #e2e8f0; border-radius: 14px; padding: 10px;
  }}
  @media (max-width: 768px) {{
    .wrap {{ padding: 16px; }}
    .hero h1 {{ font-size: 20px; }}
    .tab-btn {{ width: calc(50% - 4px); text-align: center; }}
  }}
</style>
</head>
<body>
  <div class="wrap">
    <section class="hero">
      <h1>Hub de Eventos</h1>
      <p>Curso online de Pais e Padrinhos ‚Äî atualizado automaticamente</p>
      <div class="stats">
        <span class="badge">üìä Total: {data['total_events']}</span>
        <span class="badge">üèõÔ∏è Penha: {data['penha_events_count']}</span>
        <span class="badge">‚õ™ Outras: {data['outras_events_count']}</span>
        <span class="badge">üïí {data['generated_at']}</span>
      </div>

      <div class="tabs">
        <button class="tab-btn active" data-tab="penha">üèõÔ∏è Igreja da Penha</button>
        <button class="tab-btn" data-tab="outras">‚õ™ Outras Igrejas</button>
      </div>

      <div id="panel-penha" class="panel active">
        {data['html_penha']}
      </div>
      <div id="panel-outras" class="panel">
        {data['html_outras']}
      </div>

      <div class="foot">
        üì° Atualizado via GitHub Actions ‚Ä¢ Cole este endere√ßo no Wix como <em>HTML embed</em>
      </div>
    </section>
  </div>

<script>
  // Tabs simples (sem libs externas)
  const tabs = document.querySelectorAll('.tab-btn');
  const panels = {{
    penha: document.getElementById('panel-penha'),
    outras: document.getElementById('panel-outras')
  }};
  tabs.forEach(btn => {{
    btn.addEventListener('click', () => {{
      tabs.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      const tab = btn.getAttribute('data-tab');
      panels.penha.classList.toggle('active', tab === 'penha');
      panels.outras.classList.toggle('active', tab === 'outras');
    }});
  }});
</script>
</body>
</html>"""

with open('index.html','w',encoding='utf-8') as f:
    f.write(index_html)

# p√°ginas separadas (caso queira embed espec√≠fico no Wix)
with open('penha.html','w',encoding='utf-8') as f:
    f.write(data['html_penha'])
with open('outras.html','w',encoding='utf-8') as f:
    f.write(data['html_outras'])

# JSON p√∫blico (√∫til se for consumir via JS depois)
public_data = {
    'penha_events_count': data['penha_events_count'],
    'outras_events_count': data['outras_events_count'],
    'total_events': data['total_events'],
    'last_update': data['last_update'],
    'generated_at': data['generated_at'],
    'html_penha': data['html_penha'],
    'html_outras': data['html_outras'],
}
with open('events.json','w',encoding='utf-8') as f:
    json.dump(public_data, f, indent=2, ensure_ascii=False)

print("‚úÖ Arquivos HTML gerados com sucesso")
PY

    - name: üìã Generate README
      run: |
        cat > README.md << 'EOF'
        # üèõÔ∏è Eventos Sympla - Igreja da Penha

        > Hub de eventos (autoatualizado) para Curso de Pais e Padrinhos

        ## üöÄ URLs
        - **P√°gina Principal (hub)**: https://SEU-USUARIO.github.io/SEU-REPOSITORIO/
        - **Igreja da Penha (fragmento)**: https://SEU-USUARIO.github.io/SEU-REPOSITORIO/penha.html
        - **Outras Igrejas (fragmento)**: https://SEU-USUARIO.github.io/SEU-REPOSITORIO/outras.html
        - **Dados JSON**: https://SEU-USUARIO.github.io/SEU-REPOSITORIO/events.json

        ## üîÑ Atualiza√ß√£o
        - Autom√°tico a cada 6 horas (UTC) + execu√ß√£o manual
        - Fonte: API Sympla
        - Infra: GitHub Actions + GitHub Pages

        ## üíª Instru√ß√µes (Wix)
        Use o elemento **HTML Embed** e cole:
        ```html
        <iframe
          src="https://SEU-USUARIO.github.io/SEU-REPOSITORIO/"
          width="100%" height="900" frameborder="0"
          style="border:none;background:transparent;">
        </iframe>
        ```

        EOF

    - name: üîç Check for changes
      id: changes
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html penha.html outras.html events.json README.md events-data.json || true

        if git diff --cached --quiet && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada nos eventos"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Mudan√ßas detectadas nos eventos"
        fi

    - name: üì§ Commit and push changes
      if: steps.changes.outputs.changes == 'true'
      run: |
        git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos eventos - $(date '+%d/%m/%Y %H:%M UTC')"
        git push
        echo "‚úÖ Eventos atualizados e publicados no GitHub Pages"
